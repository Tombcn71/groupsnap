import { NextRequest, NextResponse } from "next/server"
import { createClient } from "@/lib/supabase/server"
import { GoogleGenAI } from "@google/genai"
import { put } from "@vercel/blob"

export const runtime = 'nodejs'
export const dynamic = 'force-dynamic'

export async function POST(request: NextRequest) {
  let groupId: string
  
  try {
    const body = await request.json()
    groupId = body.groupId
    
    if (!groupId) {
      return NextResponse.json({ error: "Group ID required" }, { status: 400 })
    }

    if (!process.env.GOOGLE_AI_API_KEY) {
      return NextResponse.json({ error: "Google AI API not configured. Add GOOGLE_AI_API_KEY to Vercel environment variables." }, { status: 500 })
    }

    console.log("🚀 Starting AI generation for group:", groupId)
    
    // Get group data from database
    const supabase = await createClient()
    
    // Get group info
    const { data: group, error: groupError } = await supabase
      .from("groups")
      .select("*")
      .eq("id", groupId)
      .single()

    if (groupError || !group) {
      return NextResponse.json({ error: "Group not found" }, { status: 404 })
    }

    // Get member photos
    const { data: memberPhotos, error: photosError } = await supabase
      .from("member_photos")
      .select("*")
      .eq("group_id", groupId)

    if (photosError) {
      console.error("Photos error:", photosError)
      return NextResponse.json({ error: "Failed to fetch member photos" }, { status: 500 })
    }

    if (!memberPhotos || memberPhotos.length < 2) {
      return NextResponse.json({ error: "Need at least 2 member photos for AI generation" }, { status: 400 })
    }

    console.log(`📸 Found ${memberPhotos.length} photos to process`)

    // Convert images to base64
    const imagePromises = memberPhotos.map(async (photo: any) => {
      try {
        const response = await fetch(photo.image_url)
        const arrayBuffer = await response.arrayBuffer()
        const base64 = Buffer.from(arrayBuffer).toString('base64')
        return {
          name: photo.display_name || photo.email || 'Member',
          base64: base64,
          mimeType: 'image/jpeg'
        }
      } catch (error) {
        console.error(`Failed to fetch image for ${photo.display_name}:`, error)
        return null
      }
    })

    const images = (await Promise.all(imagePromises)).filter(Boolean)
    
    if (images.length < 2) {
      return NextResponse.json({ error: "Failed to process enough images for generation" }, { status: 500 })
    }

    console.log(`✅ Processed ${images.length} images successfully`)

    // Initialize Gemini with correct API
    const ai = new GoogleGenAI({
      apiKey: process.env.GOOGLE_AI_API_KEY,
    })

    const config = {
      responseModalities: ['IMAGE', 'TEXT'],
    }

    const model = 'gemini-2.5-flash-image-preview'

    // Create the prompt for group photo generation
    const prompt = `Create a professional group photo by combining these ${images.length} individual photos into one cohesive group image.

Group: "${group.name}"
Members: ${images.map(img => img.name).join(', ')}

Instructions:
- Arrange all ${images.length} people naturally in a group formation
- Maintain each person's appearance from their individual photo
- Use consistent lighting and shadows across all faces
- Create a professional, friendly atmosphere
- Ensure proper perspective and composition
- Background: Clean, professional setting suitable for a group photo

Style: Professional group photo, natural lighting, modern clean background
Quality: High resolution, photorealistic
Mood: Friendly, professional, engaging`

    const contents = [
      {
        role: 'user',
        parts: [
          { text: prompt },
          ...images.map(img => ({
            inlineData: {
              data: img.base64,
              mimeType: img.mimeType
            }
          }))
        ],
      },
    ]

    console.log("🎨 Generating with Gemini 2.5 Flash Image Preview...")

    // Generate the image
    const response = await ai.models.generateContentStream({
      model,
      config,
      contents,
    })

    let generatedImageBuffer: Buffer | null = null
    let responseText = ""

    // Process the streaming response
    for await (const chunk of response) {
      if (!chunk.candidates || !chunk.candidates[0].content || !chunk.candidates[0].content.parts) {
        continue
      }
      
      // Check for generated image
      if (chunk.candidates?.[0]?.content?.parts?.[0]?.inlineData) {
        const inlineData = chunk.candidates[0].content.parts[0].inlineData
        generatedImageBuffer = Buffer.from(inlineData.data || '', 'base64')
        console.log("🖼️ Generated image received!")
      } else {
        responseText += chunk.text || ""
      }
    }

    if (!generatedImageBuffer) {
      throw new Error("No image was generated by Gemini")
    }

    // Upload generated image to Vercel Blob
    const timestamp = Date.now()
    const filename = `ai-group-${groupId}-${timestamp}.jpg`
    
    const blob = await put(filename, generatedImageBuffer, {
      access: "public",
      addRandomSuffix: true
    })

    console.log("💾 Uploaded generated image:", blob.url)

    // Save to database
    const { error: saveError } = await supabase
      .from("generated_photos")
      .insert({
        group_id: groupId,
        image_url: blob.url,
        prompt_used: prompt,
        generation_metadata: {
          model: "gemini-2.5-flash-image-preview",
          member_count: images.length,
          members: images.map(img => img.name),
          response_text: responseText.substring(0, 500),
          generated_at: new Date().toISOString()
        }
      })

    if (saveError) {
      console.error("Failed to save generated photo:", saveError)
    }

    return NextResponse.json({
      success: true,
      message: `🎉 AI Group Photo Generated! Combined ${images.length} member photos using Gemini 2.5 Flash Image Preview.`,
      generatedImageUrl: blob.url,
      metadata: {
        memberCount: images.length,
        members: images.map(img => img.name),
        model: "gemini-2.5-flash-image-preview",
        responseText: responseText.substring(0, 200)
      }
    })

  } catch (error) {
    console.error("Generation error:", error)
    return NextResponse.json({
      error: "Failed to generate group photo: " + error.message
    }, { status: 500 })
  }
}